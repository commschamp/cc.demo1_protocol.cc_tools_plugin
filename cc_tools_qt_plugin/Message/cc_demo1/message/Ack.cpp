// Generated by commsdsl2tools_qt v7.1.0

#include "Ack.h"

#include "cc_demo1/message/Ack.h"
#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_demo1/Message.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_demo1
{

namespace message
{

class AckImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_demo1::Message,
        ::cc_demo1::message::Ack,
        AckImpl
    >
{
public:
    AckImpl() = default;
    AckImpl(const AckImpl&) = default;
    AckImpl(AckImpl&&) = default;
    virtual ~AckImpl() = default;
    AckImpl& operator=(const AckImpl&) = default;
    AckImpl& operator=(AckImpl&&) = default;
};

Ack::Ack() : m_pImpl(new AckImpl) {}
Ack::~Ack() = default;

Ack& Ack::operator=(const Ack& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

Ack& Ack::operator=(Ack&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* Ack::nameImpl() const
{
    return m_pImpl->name();
}

bool Ack::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong Ack::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString Ack::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void Ack::resetImpl()
{
    m_pImpl->reset();
}

bool Ack::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const Ack*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool Ack::isValidImpl() const
{
    return m_pImpl->isValid();
}

Ack::DataSeq Ack::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool Ack::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

Ack::Ptr Ack::cloneImpl() const
{
    ImplPtr impl(static_cast<AckImpl*>(m_pImpl->clone().release()));
    return Ptr(new Ack(std::move(impl)));
}

void Ack::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

Ack::DataSeq Ack::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

Ack::FieldsList Ack::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

Ack::FieldsList Ack::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

Ack::Ack(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_demo1

} // namespace Message

} // namespace cc_tools_qt_plugin
