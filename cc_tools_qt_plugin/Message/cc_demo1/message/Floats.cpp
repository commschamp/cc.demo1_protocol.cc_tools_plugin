// Generated by commsdsl2tools_qt v7.1.0

#include "Floats.h"

#include "cc_demo1/message/Floats.h"
#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_demo1/Message.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_demo1
{

namespace message
{

class FloatsImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_demo1::Message,
        ::cc_demo1::message::Floats,
        FloatsImpl
    >
{
public:
    FloatsImpl() = default;
    FloatsImpl(const FloatsImpl&) = default;
    FloatsImpl(FloatsImpl&&) = default;
    virtual ~FloatsImpl() = default;
    FloatsImpl& operator=(const FloatsImpl&) = default;
    FloatsImpl& operator=(FloatsImpl&&) = default;
};

Floats::Floats() : m_pImpl(new FloatsImpl) {}
Floats::~Floats() = default;

Floats& Floats::operator=(const Floats& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

Floats& Floats::operator=(Floats&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* Floats::nameImpl() const
{
    return m_pImpl->name();
}

bool Floats::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong Floats::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString Floats::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void Floats::resetImpl()
{
    m_pImpl->reset();
}

bool Floats::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const Floats*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool Floats::isValidImpl() const
{
    return m_pImpl->isValid();
}

Floats::DataSeq Floats::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool Floats::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

Floats::Ptr Floats::cloneImpl() const
{
    ImplPtr impl(static_cast<FloatsImpl*>(m_pImpl->clone().release()));
    return Ptr(new Floats(std::move(impl)));
}

void Floats::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

Floats::DataSeq Floats::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

Floats::FieldsList Floats::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

Floats::FieldsList Floats::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

Floats::Floats(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_demo1

} // namespace Message

} // namespace cc_tools_qt_plugin
