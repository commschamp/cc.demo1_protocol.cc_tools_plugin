// Generated by commsdsl2tools_qt v7.0.0

#include "Datas.h"

#include "cc_demo1/message/Datas.h"
#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_demo1/Message.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_demo1
{

namespace message
{

class DatasImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_demo1::Message,
        ::cc_demo1::message::Datas,
        DatasImpl
    >
{
public:
    DatasImpl() = default;
    DatasImpl(const DatasImpl&) = default;
    DatasImpl(DatasImpl&&) = default;
    virtual ~DatasImpl() = default;
    DatasImpl& operator=(const DatasImpl&) = default;
    DatasImpl& operator=(DatasImpl&&) = default;
};

Datas::Datas() : m_pImpl(new DatasImpl) {}
Datas::~Datas() = default;

Datas& Datas::operator=(const Datas& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

Datas& Datas::operator=(Datas&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* Datas::nameImpl() const
{
    return m_pImpl->name();
}

bool Datas::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong Datas::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString Datas::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void Datas::resetImpl()
{
    m_pImpl->reset();
}

bool Datas::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const Datas*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool Datas::isValidImpl() const
{
    return m_pImpl->isValid();
}

Datas::DataSeq Datas::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool Datas::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

Datas::Ptr Datas::cloneImpl() const
{
    ImplPtr impl(static_cast<DatasImpl*>(m_pImpl->clone().release()));
    return Ptr(new Datas(std::move(impl)));
}

void Datas::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

Datas::DataSeq Datas::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

Datas::FieldsList Datas::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

Datas::FieldsList Datas::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

Datas::Datas(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_demo1

} // namespace Message

} // namespace cc_tools_qt_plugin
