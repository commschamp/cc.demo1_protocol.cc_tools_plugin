// Generated by commsdsl2tools_qt v7.0.2

#include "ScaledInts.h"

#include "cc_demo1/message/ScaledInts.h"
#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_demo1/Message.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_demo1
{

namespace message
{

class ScaledIntsImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_demo1::Message,
        ::cc_demo1::message::ScaledInts,
        ScaledIntsImpl
    >
{
public:
    ScaledIntsImpl() = default;
    ScaledIntsImpl(const ScaledIntsImpl&) = default;
    ScaledIntsImpl(ScaledIntsImpl&&) = default;
    virtual ~ScaledIntsImpl() = default;
    ScaledIntsImpl& operator=(const ScaledIntsImpl&) = default;
    ScaledIntsImpl& operator=(ScaledIntsImpl&&) = default;
};

ScaledInts::ScaledInts() : m_pImpl(new ScaledIntsImpl) {}
ScaledInts::~ScaledInts() = default;

ScaledInts& ScaledInts::operator=(const ScaledInts& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

ScaledInts& ScaledInts::operator=(ScaledInts&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* ScaledInts::nameImpl() const
{
    return m_pImpl->name();
}

bool ScaledInts::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong ScaledInts::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString ScaledInts::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void ScaledInts::resetImpl()
{
    m_pImpl->reset();
}

bool ScaledInts::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const ScaledInts*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool ScaledInts::isValidImpl() const
{
    return m_pImpl->isValid();
}

ScaledInts::DataSeq ScaledInts::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool ScaledInts::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

ScaledInts::Ptr ScaledInts::cloneImpl() const
{
    ImplPtr impl(static_cast<ScaledIntsImpl*>(m_pImpl->clone().release()));
    return Ptr(new ScaledInts(std::move(impl)));
}

void ScaledInts::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

ScaledInts::DataSeq ScaledInts::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

ScaledInts::FieldsList ScaledInts::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

ScaledInts::FieldsList ScaledInts::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

ScaledInts::ScaledInts(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_demo1

} // namespace Message

} // namespace cc_tools_qt_plugin
