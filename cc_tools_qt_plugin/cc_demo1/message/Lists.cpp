// Generated by commsdsl2tools_qt v6.3.0

#include "Lists.h"

#include "cc_demo1/message/Lists.h"
#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_demo1/options/DefaultOptions.h"

namespace cc_tools_qt_plugin
{

namespace cc_demo1
{

namespace message
{

namespace
{

static QVariantMap createProps_f2Count(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_demo1::message::ListsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::F2Count;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .readOnly()
            .asMap();
}

struct F1Members
{
    static QVariantMap createProps_elem(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_demo1::message::ListsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::F1Members::Elem;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .asMap();
    }
}; // struct F1Members

static QVariantMap createProps_f1(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_demo1::message::ListsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::F1;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .serialisedHidden()
            .add(F1Members::createProps_elem(serHidden))
            .appendIndexToElementName()
            .asMap();
}

struct F2Members
{
    static QVariantMap createProps_elem(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_demo1::message::ListsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::F2Members::Elem;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .asMap();
    }
}; // struct F2Members

static QVariantMap createProps_f2(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_demo1::message::ListsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::F2;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .serialisedHidden()
            .add(F2Members::createProps_elem(serHidden))
            .appendIndexToElementName()
            .asMap();
}

struct F3Members
{
    struct ElementMembers
    {
        static QVariantMap createProps_mem1(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_demo1::message::ListsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::F3Members::ElementMembers::Mem1;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }

        static QVariantMap createProps_mem2(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_demo1::message::ListsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::F3Members::ElementMembers::Mem2;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }
    }; // struct ElementMembers

    static QVariantMap createProps_element(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_demo1::message::ListsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::F3Members::Element;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(ElementMembers::createProps_mem1(serHidden))
                .add(ElementMembers::createProps_mem2(serHidden))
                .serialisedHidden()
                .asMap();
    }
}; // struct F3Members

static QVariantMap createProps_f3(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_demo1::message::ListsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::F3;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .serialisedHidden()
            .add(F3Members::createProps_element(serHidden))
            .prefixName("Count")
            .showPrefix()
            .appendIndexToElementName()
            .asMap();
}

struct F4Members
{
    struct ElementMembers
    {
        static QVariantMap createProps_mem1(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_demo1::message::ListsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::F4Members::ElementMembers::Mem1;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }

        static QVariantMap createProps_mem2(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_demo1::message::ListsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::F4Members::ElementMembers::Mem2;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }
    }; // struct ElementMembers

    static QVariantMap createProps_element(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_demo1::message::ListsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::F4Members::Element;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(ElementMembers::createProps_mem1(serHidden))
                .add(ElementMembers::createProps_mem2(serHidden))
                .serialisedHidden()
                .asMap();
    }
}; // struct F4Members

static QVariantMap createProps_f4(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_demo1::message::ListsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::F4;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(F4Members::createProps_element(true))
            .appendIndexToElementName()
            .asMap();
}

struct F5Members
{
    struct ElementMembers
    {
        static QVariantMap createProps_mem1(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_demo1::message::ListsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::F5Members::ElementMembers::Mem1;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }

        static QVariantMap createProps_mem2(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_demo1::message::ListsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::F5Members::ElementMembers::Mem2;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }
    }; // struct ElementMembers

    static QVariantMap createProps_element(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_demo1::message::ListsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::F5Members::Element;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(ElementMembers::createProps_mem1(serHidden))
                .add(ElementMembers::createProps_mem2(serHidden))
                .serialisedHidden()
                .asMap();
    }
}; // struct F5Members

static QVariantMap createProps_f5(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_demo1::message::ListsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::F5;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(F5Members::createProps_element(true))
            .appendIndexToElementName()
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_f2Count(false));
    props.append(createProps_f1(false));
    props.append(createProps_f2(false));
    props.append(createProps_f3(false));
    props.append(createProps_f4(false));
    props.append(createProps_f5(false));
    return props;
}

} // namespace

class ListsImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_demo1::message::Lists<cc_tools_qt_plugin::cc_demo1::Message, cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>,
        ListsImpl
    >
{
public:
    ListsImpl() = default;
    ListsImpl(const ListsImpl&) = delete;
    ListsImpl(ListsImpl&&) = delete;
    virtual ~ListsImpl() = default;
    ListsImpl& operator=(const ListsImpl&) = default;
    ListsImpl& operator=(ListsImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

Lists::Lists() : m_pImpl(new ListsImpl) {}
Lists::~Lists() = default;

Lists& Lists::operator=(const Lists& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

Lists& Lists::operator=(Lists&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

Lists::MsgIdParamType Lists::doGetId()
{
    return ::cc_demo1::message::Lists<cc_tools_qt_plugin::cc_demo1::Message, cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::doGetId();
}

const char* Lists::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& Lists::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void Lists::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void Lists::resetImpl()
{
    m_pImpl->reset();
}

bool Lists::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const Lists*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

Lists::MsgIdParamType Lists::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus Lists::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus Lists::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool Lists::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t Lists::lengthImpl() const
{
    return m_pImpl->length();
}

bool Lists::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_demo1

} // namespace cc_tools_qt_plugin
