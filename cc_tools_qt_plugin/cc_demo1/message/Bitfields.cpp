// Generated by commsdsl2tools_qt v6.3.2

#include "Bitfields.h"

#include "cc_demo1/message/Bitfields.h"
#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_demo1/options/DefaultOptions.h"

namespace cc_tools_qt_plugin
{

namespace cc_demo1
{

namespace message
{

namespace
{

struct F1Members
{
    static QVariantMap createProps_mem1(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_demo1::message::BitfieldsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::F1Members::Mem1;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .asMap();
    }

    static QVariantMap createProps_mem2(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_demo1::message::BitfieldsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::F1Members::Mem2;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(0U, "Bit0")
                .add(1U, "Bit1")
                .add(2U, "Bit2")
                .asMap();
    }

    static QVariantMap createProps_mem3(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_demo1::message::BitfieldsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::F1Members::Mem3;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add("V1", 0)
                .add("V2", 3)
                .asMap();
    }
}; // struct F1Members

static QVariantMap createProps_f1(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_demo1::message::BitfieldsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::F1;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(F1Members::createProps_mem1(true))
            .add(F1Members::createProps_mem2(true))
            .add(F1Members::createProps_mem3(true))
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_f1(false));
    return props;
}

} // namespace

class BitfieldsImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_demo1::message::Bitfields<cc_tools_qt_plugin::cc_demo1::Message, cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>,
        BitfieldsImpl
    >
{
public:
    BitfieldsImpl() = default;
    BitfieldsImpl(const BitfieldsImpl&) = delete;
    BitfieldsImpl(BitfieldsImpl&&) = delete;
    virtual ~BitfieldsImpl() = default;
    BitfieldsImpl& operator=(const BitfieldsImpl&) = default;
    BitfieldsImpl& operator=(BitfieldsImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

Bitfields::Bitfields() : m_pImpl(new BitfieldsImpl) {}
Bitfields::~Bitfields() = default;

Bitfields& Bitfields::operator=(const Bitfields& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

Bitfields& Bitfields::operator=(Bitfields&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

Bitfields::MsgIdParamType Bitfields::doGetId()
{
    return ::cc_demo1::message::Bitfields<cc_tools_qt_plugin::cc_demo1::Message, cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::doGetId();
}

const char* Bitfields::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& Bitfields::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void Bitfields::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void Bitfields::resetImpl()
{
    m_pImpl->reset();
}

bool Bitfields::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const Bitfields*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

Bitfields::MsgIdParamType Bitfields::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus Bitfields::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus Bitfields::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool Bitfields::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t Bitfields::lengthImpl() const
{
    return m_pImpl->length();
}

bool Bitfields::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_demo1

} // namespace cc_tools_qt_plugin
