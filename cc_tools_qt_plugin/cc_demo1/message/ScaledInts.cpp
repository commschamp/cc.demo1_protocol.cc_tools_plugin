// Generated by commsdsl2tools_qt v6.3.0

#include "ScaledInts.h"

#include "cc_demo1/message/ScaledInts.h"
#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_demo1/field/Lat.h"
#include "cc_tools_qt_plugin/cc_demo1/field/Lon.h"
#include "cc_tools_qt_plugin/cc_demo1/options/DefaultOptions.h"

namespace cc_tools_qt_plugin
{

namespace cc_demo1
{

namespace message
{

namespace
{

static QVariantMap createProps_lat(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_demo1::message::ScaledIntsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Lat;
    auto props = cc_tools_qt_plugin::cc_demo1::field::createProps_lat(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_lon(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_demo1::message::ScaledIntsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Lon;
    auto props = cc_tools_qt_plugin::cc_demo1::field::createProps_lon(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_height(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_demo1::message::ScaledIntsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Height;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_someScaledVal(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_demo1::message::ScaledIntsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::SomeScaledVal;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .scaledDecimals(2U)
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_lat(false));
    props.append(createProps_lon(false));
    props.append(createProps_height(false));
    props.append(createProps_someScaledVal(false));
    return props;
}

} // namespace

class ScaledIntsImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_demo1::message::ScaledInts<cc_tools_qt_plugin::cc_demo1::Message, cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>,
        ScaledIntsImpl
    >
{
public:
    ScaledIntsImpl() = default;
    ScaledIntsImpl(const ScaledIntsImpl&) = delete;
    ScaledIntsImpl(ScaledIntsImpl&&) = delete;
    virtual ~ScaledIntsImpl() = default;
    ScaledIntsImpl& operator=(const ScaledIntsImpl&) = default;
    ScaledIntsImpl& operator=(ScaledIntsImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

ScaledInts::ScaledInts() : m_pImpl(new ScaledIntsImpl) {}
ScaledInts::~ScaledInts() = default;

ScaledInts& ScaledInts::operator=(const ScaledInts& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

ScaledInts& ScaledInts::operator=(ScaledInts&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

ScaledInts::MsgIdParamType ScaledInts::doGetId()
{
    return ::cc_demo1::message::ScaledInts<cc_tools_qt_plugin::cc_demo1::Message, cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::doGetId();
}

const char* ScaledInts::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& ScaledInts::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void ScaledInts::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void ScaledInts::resetImpl()
{
    m_pImpl->reset();
}

bool ScaledInts::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const ScaledInts*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

ScaledInts::MsgIdParamType ScaledInts::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus ScaledInts::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus ScaledInts::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool ScaledInts::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t ScaledInts::lengthImpl() const
{
    return m_pImpl->length();
}

bool ScaledInts::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_demo1

} // namespace cc_tools_qt_plugin
