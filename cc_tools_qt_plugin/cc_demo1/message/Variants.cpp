// Generated by commsdsl2tools_qt v6.3.0

#include "Variants.h"

#include "cc_demo1/message/Variants.h"
#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_demo1/field/PropRemLen.h"
#include "cc_tools_qt_plugin/cc_demo1/options/DefaultOptions.h"

namespace cc_tools_qt_plugin
{

namespace cc_demo1
{

namespace message
{

namespace
{

struct Props1Members
{
    struct PropertyMembers
    {
        struct Prop1Members
        {
            static QVariantMap createProps_key(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props1Members::PropertyMembers::Prop1Members::Key;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .readOnly()
                        .asMap();
            }

            static QVariantMap createProps_val(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props1Members::PropertyMembers::Prop1Members::Val;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .asMap();
            }
        }; // struct Prop1Members

        static QVariantMap createProps_prop1(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props1Members::PropertyMembers::Prop1;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .add(Prop1Members::createProps_key(serHidden))
                    .add(Prop1Members::createProps_val(serHidden))
                    .serialisedHidden()
                    .asMap();
        }

        struct Prop2Members
        {
            static QVariantMap createProps_key(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props1Members::PropertyMembers::Prop2Members::Key;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .readOnly()
                        .asMap();
            }

            static QVariantMap createProps_val(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props1Members::PropertyMembers::Prop2Members::Val;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .asMap();
            }
        }; // struct Prop2Members

        static QVariantMap createProps_prop2(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props1Members::PropertyMembers::Prop2;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .add(Prop2Members::createProps_key(serHidden))
                    .add(Prop2Members::createProps_val(serHidden))
                    .serialisedHidden()
                    .asMap();
        }

        struct Prop3Members
        {
            static QVariantMap createProps_key(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props1Members::PropertyMembers::Prop3Members::Key;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .readOnly()
                        .asMap();
            }

            static QVariantMap createProps_val(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props1Members::PropertyMembers::Prop3Members::Val;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .asMap();
            }
        }; // struct Prop3Members

        static QVariantMap createProps_prop3(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props1Members::PropertyMembers::Prop3;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .add(Prop3Members::createProps_key(serHidden))
                    .add(Prop3Members::createProps_val(serHidden))
                    .serialisedHidden()
                    .asMap();
        }
    }; // struct PropertyMembers

    static QVariantMap createProps_property(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props1Members::Property;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(PropertyMembers::createProps_prop1(serHidden))
                .add(PropertyMembers::createProps_prop2(serHidden))
                .add(PropertyMembers::createProps_prop3(serHidden))
                .serialisedHidden()
                .asMap();
    }
}; // struct Props1Members

static QVariantMap createProps_props1(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props1;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .serialisedHidden()
            .add(Props1Members::createProps_property(serHidden))
            .prefixName("Count")
            .showPrefix()
            .appendIndexToElementName()
            .asMap();
}

struct Props2Members
{
    struct PropertyMembers
    {
        struct Prop1Members
        {
            static QVariantMap createProps_type(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props2Members::PropertyMembers::Prop1Members::Type;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .readOnly()
                        .asMap();
            }

            static QVariantMap createProps_length(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props2Members::PropertyMembers::Prop1Members::Length;
                auto props = cc_tools_qt_plugin::cc_demo1::field::createProps_propRemLen(Field::name(), serHidden);
                auto extraProps =
                    cc_tools_qt::property::field::Common()
                        .readOnly(false)
                        ;
                extraProps.setTo(props);
                return props;
            }

            static QVariantMap createProps_val(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props2Members::PropertyMembers::Prop1Members::Val;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .asMap();
            }
        }; // struct Prop1Members

        static QVariantMap createProps_prop1(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props2Members::PropertyMembers::Prop1;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .add(Prop1Members::createProps_type(serHidden))
                    .add(Prop1Members::createProps_length(serHidden))
                    .add(Prop1Members::createProps_val(serHidden))
                    .serialisedHidden()
                    .asMap();
        }

        struct Prop2Members
        {
            static QVariantMap createProps_type(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props2Members::PropertyMembers::Prop2Members::Type;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .readOnly()
                        .asMap();
            }

            static QVariantMap createProps_length(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props2Members::PropertyMembers::Prop2Members::Length;
                auto props = cc_tools_qt_plugin::cc_demo1::field::createProps_propRemLen(Field::name(), serHidden);
                auto extraProps =
                    cc_tools_qt::property::field::Common()
                        .readOnly(false)
                        ;
                extraProps.setTo(props);
                return props;
            }

            static QVariantMap createProps_val(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props2Members::PropertyMembers::Prop2Members::Val;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .asMap();
            }
        }; // struct Prop2Members

        static QVariantMap createProps_prop2(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props2Members::PropertyMembers::Prop2;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .add(Prop2Members::createProps_type(serHidden))
                    .add(Prop2Members::createProps_length(serHidden))
                    .add(Prop2Members::createProps_val(serHidden))
                    .serialisedHidden()
                    .asMap();
        }

        struct Prop3Members
        {
            static QVariantMap createProps_type(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props2Members::PropertyMembers::Prop3Members::Type;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .readOnly()
                        .asMap();
            }

            static QVariantMap createProps_length(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props2Members::PropertyMembers::Prop3Members::Length;
                auto props = cc_tools_qt_plugin::cc_demo1::field::createProps_propRemLen(Field::name(), serHidden);
                auto extraProps =
                    cc_tools_qt::property::field::Common()
                        .readOnly(false)
                        ;
                extraProps.setTo(props);
                return props;
            }

            static QVariantMap createProps_val(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props2Members::PropertyMembers::Prop3Members::Val;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .asMap();
            }
        }; // struct Prop3Members

        static QVariantMap createProps_prop3(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props2Members::PropertyMembers::Prop3;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .add(Prop3Members::createProps_type(serHidden))
                    .add(Prop3Members::createProps_length(serHidden))
                    .add(Prop3Members::createProps_val(serHidden))
                    .serialisedHidden()
                    .asMap();
        }

        struct UnknownPropMembers
        {
            static QVariantMap createProps_type(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props2Members::PropertyMembers::UnknownPropMembers::Type;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .readOnly()
                        .asMap();
            }

            static QVariantMap createProps_length(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props2Members::PropertyMembers::UnknownPropMembers::Length;
                auto props = cc_tools_qt_plugin::cc_demo1::field::createProps_propRemLen(Field::name(), serHidden);
                auto extraProps =
                    cc_tools_qt::property::field::Common()
                        .readOnly(false)
                        ;
                extraProps.setTo(props);
                return props;
            }

            static QVariantMap createProps_val(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props2Members::PropertyMembers::UnknownPropMembers::Val;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .asMap();
            }
        }; // struct UnknownPropMembers

        static QVariantMap createProps_unknownProp(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props2Members::PropertyMembers::UnknownProp;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .add(UnknownPropMembers::createProps_type(serHidden))
                    .add(UnknownPropMembers::createProps_length(serHidden))
                    .add(UnknownPropMembers::createProps_val(serHidden))
                    .serialisedHidden()
                    .asMap();
        }
    }; // struct PropertyMembers

    static QVariantMap createProps_property(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props2Members::Property;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(PropertyMembers::createProps_prop1(serHidden))
                .add(PropertyMembers::createProps_prop2(serHidden))
                .add(PropertyMembers::createProps_prop3(serHidden))
                .add(PropertyMembers::createProps_unknownProp(serHidden))
                .serialisedHidden()
                .asMap();
    }
}; // struct Props2Members

static QVariantMap createProps_props2(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_demo1::message::VariantsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Props2;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .serialisedHidden()
            .add(Props2Members::createProps_property(serHidden))
            .prefixName("Length")
            .showPrefix()
            .appendIndexToElementName()
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_props1(false));
    props.append(createProps_props2(false));
    return props;
}

} // namespace

class VariantsImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_demo1::message::Variants<cc_tools_qt_plugin::cc_demo1::Message, cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>,
        VariantsImpl
    >
{
public:
    VariantsImpl() = default;
    VariantsImpl(const VariantsImpl&) = delete;
    VariantsImpl(VariantsImpl&&) = delete;
    virtual ~VariantsImpl() = default;
    VariantsImpl& operator=(const VariantsImpl&) = default;
    VariantsImpl& operator=(VariantsImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

Variants::Variants() : m_pImpl(new VariantsImpl) {}
Variants::~Variants() = default;

Variants& Variants::operator=(const Variants& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

Variants& Variants::operator=(Variants&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

Variants::MsgIdParamType Variants::doGetId()
{
    return ::cc_demo1::message::Variants<cc_tools_qt_plugin::cc_demo1::Message, cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::doGetId();
}

const char* Variants::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& Variants::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void Variants::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void Variants::resetImpl()
{
    m_pImpl->reset();
}

bool Variants::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const Variants*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

Variants::MsgIdParamType Variants::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus Variants::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus Variants::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool Variants::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t Variants::lengthImpl() const
{
    return m_pImpl->length();
}

bool Variants::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_demo1

} // namespace cc_tools_qt_plugin
