// Generated by commsdsl2tools_qt v6.3.2

#include "Floats.h"

#include "cc_demo1/message/Floats.h"
#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_demo1/options/DefaultOptions.h"

namespace cc_tools_qt_plugin
{

namespace cc_demo1
{

namespace message
{

namespace
{

static QVariantMap createProps_timeout(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_demo1::message::FloatsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Timeout;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .addSpecial("Infinite", 0.000000)
            .addSpecial("Invalid", std::numeric_limits<double>::quiet_NaN())
            .asMap();
}

static QVariantMap createProps_distance(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_demo1::message::FloatsFields<cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::Distance;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .decimals(3U)
            .addSpecial("Infinite", std::numeric_limits<double>::infinity())
            .addSpecial("Invalid", std::numeric_limits<double>::quiet_NaN())
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_timeout(false));
    props.append(createProps_distance(false));
    return props;
}

} // namespace

class FloatsImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_demo1::message::Floats<cc_tools_qt_plugin::cc_demo1::Message, cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>,
        FloatsImpl
    >
{
public:
    FloatsImpl() = default;
    FloatsImpl(const FloatsImpl&) = delete;
    FloatsImpl(FloatsImpl&&) = delete;
    virtual ~FloatsImpl() = default;
    FloatsImpl& operator=(const FloatsImpl&) = default;
    FloatsImpl& operator=(FloatsImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

Floats::Floats() : m_pImpl(new FloatsImpl) {}
Floats::~Floats() = default;

Floats& Floats::operator=(const Floats& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

Floats& Floats::operator=(Floats&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

Floats::MsgIdParamType Floats::doGetId()
{
    return ::cc_demo1::message::Floats<cc_tools_qt_plugin::cc_demo1::Message, cc_tools_qt_plugin::cc_demo1::options::DefaultOptions>::doGetId();
}

const char* Floats::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& Floats::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void Floats::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void Floats::resetImpl()
{
    m_pImpl->reset();
}

bool Floats::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const Floats*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

Floats::MsgIdParamType Floats::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus Floats::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus Floats::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool Floats::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t Floats::lengthImpl() const
{
    return m_pImpl->length();
}

bool Floats::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_demo1

} // namespace cc_tools_qt_plugin
